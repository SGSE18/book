(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{91:function(e,i,n){"use strict";n.r(i);var r=n(0),t=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,i=e.$createElement,n=e._self._c||i;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"continuous-software-engineering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#continuous-software-engineering","aria-hidden":"true"}},[e._v("#")]),e._v(" Continuous Software Engineering")]),n("h2",{attrs:{id:"definition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#definition","aria-hidden":"true"}},[e._v("#")]),e._v(" Definition")]),n("p",[e._v('"Continuous Software Engineering" beschreibt eine Möglichkeit der iterativen Softwareentwicklung und fokussiert sich auf den Prozess der Auslieferung an den Benutzer. Continuous Software Engineering unterstützt den agilen Softwareentwicklungsprozess.')]),n("h2",{attrs:{id:"agile-softwareentwicklung"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#agile-softwareentwicklung","aria-hidden":"true"}},[e._v("#")]),e._v(" Agile Softwareentwicklung")]),n("p",[e._v("Agile Softwareentwicklungsprozesse haben zum Ziel, den Prozess der Softwareentwicklung zu beschleunigen und die Zeit bis zum Einsatz beim Benutzer zu verkürzen.")]),n("h3",{attrs:{id:"fruhe-phase-mit-scrum"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fruhe-phase-mit-scrum","aria-hidden":"true"}},[e._v("#")]),e._v(" Frühe Phase mit Scrum")]),n("p",[e._v("Scrum ist eine agile Softwareentwicklungmethode für kleinere Softwareentwicklungsteams. Scrum beschreibt den Softwareentwicklungsprozess, nicht aber den Prozess der Auslieferung an den Nutzer.")]),n("h3",{attrs:{id:"devops"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#devops","aria-hidden":"true"}},[e._v("#")]),e._v(" DevOps")]),n("h5",{attrs:{id:"definition-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#definition-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Definition")]),n("p",[e._v("Anders als  z.b. Scrum beschreibt DevOps nicht den Prozess der Softwareentwicklung, sondern den Prozess der Auslieferung an den Nutzer.")]),n("h5",{attrs:{id:"entwicklung-it-operations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entwicklung-it-operations","aria-hidden":"true"}},[e._v("#")]),e._v(" Entwicklung/IT-Operations")]),n("p",[e._v("Der Begriff DevOps setzt sich zusammen aus den Begriffen Development (Entwicklung) und Operations. Der Bereich Entwicklung ist für die Softwareentwicklung zuständig, der Bereich Operations für die notwendige IT-Infrastruktur (z.b. Bereitstellung notwendiger Tools). Wenn zusätzlich der Bereich Sicherheit involviert ist, spricht man auch von DevSecOps.")]),n("h5",{attrs:{id:"devops-als-agiler-prozess"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#devops-als-agiler-prozess","aria-hidden":"true"}},[e._v("#")]),e._v(" DevOps als agiler Prozess")]),n("h5",{attrs:{id:"automatisierung"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automatisierung","aria-hidden":"true"}},[e._v("#")]),e._v(" Automatisierung")]),n("p",[e._v("Ein Ziel von DevOps ist die größtmögliche Automatisierung des Auslieferungsprozesses durch den Einsatz geeigneter Tools.")]),n("h5",{attrs:{id:"schneller-releases-deployment-cycle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schneller-releases-deployment-cycle","aria-hidden":"true"}},[e._v("#")]),e._v(" Schneller Releases/Deployment Cycle")]),n("h5",{attrs:{id:"feedback-bugtracker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#feedback-bugtracker","aria-hidden":"true"}},[e._v("#")]),e._v(" Feedback (Bugtracker)")]),n("p",[e._v("Um Feedback möglichst schnell zum Entwickler zu bekommen, wird bei DevOps ein Bugtracker verwendet. Der Bugtracker dient dazu, Feedback von Testern zu sammeln, sodass der Entwickler die Möglichkeit hat, zeitnah auf Feedback einzugehen und eventuell gefundene Probleme zu beheben.")]),n("h5",{attrs:{id:"microservices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#microservices","aria-hidden":"true"}},[e._v("#")]),e._v(" Microservices")]),n("h5",{attrs:{id:"automatisiertes-testen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automatisiertes-testen","aria-hidden":"true"}},[e._v("#")]),e._v(" Automatisiertes Testen")]),n("p",[e._v("Soweit möglich, wird bei DevOps automatisiert, bspw. mithilfe von Unit-Tsts, getestet. Jedesmal wenn aus dem Quellccode ein neuer Build erstellt wird, werden automatisierten Tests ausgeführt und deren Ergebnisse an den Entwickler weitergeleitet.")]),n("h2",{attrs:{id:"workflows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workflows","aria-hidden":"true"}},[e._v("#")]),e._v(" Workflows")]),n("pre",[n("code",[e._v("Continuous Delivery\n\tContinuous Integration\n\tschnellerer Release\n\tDeployment-Pipeline\n\tjede Version (auch intern) muss lauffähig sein\n\tautomatisierte und manuelle Tests\nContinuous Improvment\n\tkontinuirliche Verbesserung\n\tMöglichkeiten zur Verbesserung werden identifiziert und umgesetzt\nContinuous Integration\n\tContinuous Delivery als Weiterentwicklung\n\nDefinition und Abgrenzung\n")])]),n("h2",{attrs:{id:"tools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tools","aria-hidden":"true"}},[e._v("#")]),e._v(" Tools")]),n("h3",{attrs:{id:"docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker")]),n("h4",{attrs:{id:"definition-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#definition-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Definition")]),n("p",[e._v("Docker ist ein Tool zur Containerisierung von Software. Dabei wird die Software mit allen ihren Abhängigkeiten (z.b. Bibliotheken) in ein Image gepackt. Dieses Image kann dann von einem standardisierten Container ausgeführt werden.")]),n("p",[e._v("Die Docker-Laufzeitumgebung ist an Linux angelehnt. Es stehen dem Entwickler somit alle die Funktionen von Linux zur Verfügung. Docker selbst ist ebenfalls Linux-Software und damit standardmäßig nur unter Linux lauffähig. Soll Docker unter Windows oder Mac OS ausgeführt werden, muss ein Linux-System in einer virtuellen Maschine genutzt werden. Docker selbst ist keine Virtualisierunganwendung.")]),n("h4",{attrs:{id:"begriffe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#begriffe","aria-hidden":"true"}},[e._v("#")]),e._v(" Begriffe")]),n("h5",{attrs:{id:"image"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#image","aria-hidden":"true"}},[e._v("#")]),e._v(" Image")]),n("p",[e._v("Ein Image ist ein Abbild der Software mit ihren Abhängigkeiten.")]),n("h5",{attrs:{id:"layer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#layer","aria-hidden":"true"}},[e._v("#")]),e._v(" Layer")]),n("p",[e._v("Ein Layer ist ein Set von Änderungen innerhalb eines Image. Für jede Änderung wird im Image ein neues Layer angelegt.")]),n("h5",{attrs:{id:"container"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#container","aria-hidden":"true"}},[e._v("#")]),e._v(" Container")]),n("p",[e._v("Ein Container ist die laufende Instanz eines Images. Container bieten eine standardisierte Laufzeitumgebung für Images.")]),n("h4",{attrs:{id:"containerisierung-vs-virtualisierung"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#containerisierung-vs-virtualisierung","aria-hidden":"true"}},[e._v("#")]),e._v(" Containerisierung vs. Virtualisierung")]),n("p",[e._v("Ähnlich wie bei der Virtualisierung wird auch bei der Containerisierung eine Gast-Betriebssystem innerhalb des Host-Systems emuliert, Containerisierung hat gegenüber der Virtualisierung aber den Unterschied, dass das Container-System sich Ressourcen mit dem Host-System teilt. Dies soll bei der Virtualisierung vermieden werden.")]),n("p",[e._v('Im Falle der Containerisierung hat das zum Vorteil, das Ressourcen besser genutzt werden und der "Overhead" einer containerisierten Anwendung sehr viel geringer ist als der einer virtualisierten Anweundung. Dies erlaubt dem Entwickler, problems mehrere containerisierte Anwendungen gleichzeitig laufen zu lassen, was bei der Virtualisierung oft nicht ohne weiteres möglich ist.')]),n("pre",[n("code",[e._v("keine Virtualisierung\nLinux-basiert\nTools\n\tDocker-Hub\nintegrierte Versionsverwaltung\n\tDocker hat eine integrierte Versionsverwaltung. Änderungen an einem Image werden innerhalb des Image in Form von Layern gespeichert. Mithilfe der Layer lässt sich die komplette Versionshistorie eines Image nachvollziehen.\nContainerisierung vs Virtualisierung\nAnwendung gebündelt mit Abhängigkeiten\nSicherheit\n")])]),n("h3",{attrs:{id:"jira"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jira","aria-hidden":"true"}},[e._v("#")]),e._v(" JIRA")]),n("h3",{attrs:{id:"jenkins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jenkins","aria-hidden":"true"}},[e._v("#")]),e._v(" Jenkins")])])}],!1,null,null,null);i.default=t.exports}}]);