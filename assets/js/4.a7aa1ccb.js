(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{164:function(e,n,t){"use strict";t.r(n);var r=[function(){var e=this.$createElement,n=this._self._c||e;return n("h1",{attrs:{id:"functional-reactive-programming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functional-reactive-programming","aria-hidden":"true"}},[this._v("#")]),this._v(" Functional Reactive Programming")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"functional-programming-konzept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming-konzept","aria-hidden":"true"}},[this._v("#")]),this._v(" Functional Programming Konzept")])},function(){var e=this.$createElement,n=this._self._c||e;return n("ul",[n("li",[this._v("Wartbarer Code")]),n("li",[this._v("Wiederverwertbarer Code")]),n("li",[this._v("Verständlicher Code")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('public class Arbeiter{\n    private String name;\n    private int gehalt;\n\n    public Arbeiter(String _name, int _gehalt){\n        this.name = _name;\n        this.gehalt = _gehalt;\n    }\n\n    public int gehaltsErhoehung(int zuschlag){\n        this.gehalt += zuschlag;\n        return this.gehalt;\n    }\n\n    public String toString(){\n        return this.name + " verdient " + this.gehalt;\n    }\n}\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("for (angestelltenListe Angestellter: tempAngestellter){\n    tempAngestellter.gehaltsErhoehung(200);\n}\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('arbeiter = [\n  [ "Alice",  10000.0 ],\n  [ "Bob", 12500.0 ]\n]\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Ein weiterer Punkt der zum Aspekt der Reinheit einer Funktion gehört, ist das Auftreten von Seiteneffekten (Side effects).\nSeiteneffekte können vielfältig sein: Das Ändern einer globalen Variable im Funktionsaufruf, das Lesen aus einer Datei oder\ndas Werfen einer Exception. Beispielsweise kann das Lesen einer Datei in einer Funktion den Rückgabewert unabhängig"),n("br"),this._v("\nvon den übergebenen Parametern verändern, was nicht mehr der Definition einer Reinen Funktion entsprechen würde.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"vorteile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vorteile","aria-hidden":"true"}},[this._v("#")]),this._v(" Vorteile")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"nachteile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nachteile","aria-hidden":"true"}},[this._v("#")]),this._v(" Nachteile")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"reactive-programming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reactive-programming","aria-hidden":"true"}},[this._v("#")]),this._v(" Reactive Programming")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Beim reaktiven Programmieren geht es darum, die Veränderung eines Zustandes zu beobachten und gegebenfalls mit einer Veränderungen\ndes eigenen Zustandes zu reagieren. Eine Zustandsänderung könnte zum Beispiel das Drücken eines Knopfes auf einer Benutzeroberfläche oder\naber das Abholen von Daten über einen HTTP Aufruf. Bibliotheken wie RxJS, xStream oder Most.js erlauben es von fast jeder Variable oder Objekt\nein Observable zu erstellen. So kann unter RxJS beispielsweise mit dem "),n("code",[this._v("just()")]),this._v(" Operator ein Observable von der Zahl 1 erstellt werden:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var oneStream = Rx.Observable.just(1);\n\noneStream.subscribe(number =>{\n    console.log(number); \\\\prints 1\n});\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Ein Observable ist zu verstehen als ein Objekt, welche über einen bestimmten oder auch unbestimmten Zeitraum\nWerte ausgibt (emitted). Ein Observable ist somit zu stehen als ein Stream von Daten. Um an die emitteten Daten zu gelangen, kann dem Stream über die "),n("code",[this._v("subscribe()")]),this._v(" Methode gelauscht werden. Erst nachdem jemand auf den Stream\nsubscribed hat, fängt der Stream an, Werte auszugeben. Dabei wird der Callback innerhalb der Subscribe Methode\nin jedes mal ausgeführt, sobald ein neuer Wert von dem Stream emitted wurde.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('var numbers = [1,2,3];\nvar arrayStream. = Rx.Observable.form(numbers);\n\narrayStream.subscribe(number =>{\n    console.log("Number " + number); \n}); \n\n//Output:\n//Number 1\n//Number 2\n//Number 3\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("In diesem Beispiel wurde mit dem "),n("code",[this._v("fromArray()")]),this._v(" Operator aus einem Array ein Observable erstellt und das Array\nso als Stream verfügbar gemacht. Nach dem ein Observer den Stream abonniert (subscribed), emittet der Stream so lange Werte bis das Ende des Array erreicht ist.\nEin Mittel die Streams darzustellen sind die sogenannten Marble-Diagramme: Diese Diagramme bestehen aus einem\nPfeil, welcher eine Zeitleiste darstellt.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"der-observer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#der-observer","aria-hidden":"true"}},[this._v("#")]),this._v(" Der Observer")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Der Observer wird in den oberen beiden Beispielen impliziert erstellt. Ein Observer besteht im wesentlichen aus\ndrei Methoden: "),t("code",[e._v("onNext()")]),e._v(", "),t("code",[e._v("onError()")]),e._v(" und "),t("code",[e._v("onComplete()")]),e._v(". In den Beispielen wurde mit der "),t("code",[e._v("subscribe()")]),e._v(" Methode\nein neuer Observer erstellt, welcher nur die "),t("code",[e._v("onNext()")]),e._v(" Methode als anonyme Funktion übergeben bekommen hat. Damit wird der Observer nur über einen\nneue emitteten Wert des Streams informiert. Die "),t("code",[e._v("onComplete()")]),e._v(" Methode würde im Beispiel nach dem Ausgeben des letzten\nWertes aufgerufen um dem Observer mitzuteilen, dass auf diesem Stream keine neuen Werte mehr ausgegeben werden.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[n("img",{attrs:{src:t(69),alt:"Observable-Patter",title:"Das Observerpattern"}}),this._v("\nUm hier die parallele zur RxJS Bibliothek zu ziehen: Die mit "),n("code",[this._v("subscribe()")]),this._v(" übergeben Funktion ist in diesem Falle der Observer. Zu einen\nStream können beliebig viele Observer hinzugefügt werden. Das im UML angegebene Subject ist der eigentliche Stream. Die "),n("code",[this._v("registerObserver()")]),this._v("\nMethode ist die "),n("code",[this._v("subscribe()")]),this._v(" Methode des Observables.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"das-observable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#das-observable","aria-hidden":"true"}},[this._v("#")]),this._v(" Das Observable")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var buttonEvent = document.querySelector('.myButton');\nvar clickStream = Rx.Observable.fromEvent('buttonEvent', click);\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("ul",[n("li",[this._v("from()        - Erstellt ein Observable von Datenstruktur und Iteriert über diese falls möglich")]),n("li",[this._v("just()        - Erstellt ein Observable von Datenstruktur und emittet eben diese")]),n("li",[this._v("fromEvent()   - Erstellt ein Observable von einer Eventsource und emittet das Event")]),n("li",[this._v("interval()    - Erstellt ein Observable welches in einem bestimmten Intervall aufsteigende Zahlen emittet")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"die-operatoren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#die-operatoren","aria-hidden":"true"}},[this._v("#")]),this._v(" Die Operatoren")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Nehmen wird das Klickevent Beispiel von oben: Die Aufgabe soll es sein, die Anzahl der Klicks auf den Button zu zählen. Aber anstatt die\nkomplette Logik in die "),n("code",[this._v("subscribe()")]),this._v(" zu packen, können wir uns einer vielzahl an Operatoren bedienen, welche den Stream manipulieren.\nZunächst sollen alle Events, die auf dem Stream passieren auf einen neuen Wert abgebildet werden. Dazu kann der "),n("code",[this._v("map()")]),this._v(" Operator genutzt werden:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var buttonEvent = document.querySelector('.myButton');\nvar clickStream = Rx.Observable.fromEvent('buttonEvent', click);\n\nvar numberStream = clickStream.map(event => 1);\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("clickStream       ---x----x-x----x-x--\x3e"),n("br"),this._v("\n          map()"),n("br"),this._v("\nnumberStream  ---1----1-1----1-1--\x3e")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Nun, da die Klickevents auf eine Zahl gemapped worden sind, müssen die vom numberStream emitteten Zahlen nur noch addiert werden. Dazu muss\nes State geben, in welchem das Ergebnis der vorheringen Addition gehalten wird. Ein Operator mit eingebautem State ist der "),n("code",[this._v("scan()")]),this._v("\nOperator.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var buttonEvent = document.querySelector('.myButton');\nvar clickStream = Rx.Observable.fromEvent('buttonEvent', click);\n\nvar numberStream = clickStream.map(event => 1);\nvar numberClickStream = numberStream.scan((accumulator, current) => accumulator + current);\n\nnumberClickStream.subscribe(number => console.log(number));\n\n\\\\Output: \n\\\\1\n\\\\2\n\\\\3\n...\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("clickStream                 ---x----x-x----x-x--\x3e"),n("br"),this._v("\n          map()"),n("br"),this._v("\nnumberStream            ---1----1-1----1-1--\x3e"),n("br"),this._v("\n          scan()"),n("br"),this._v("\nnumberClickStream  ---1----2-3----4-5--\x3e")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var buttonEvent = document.querySelector('.myButton');\nvar clickStream = Rx.Observable.fromEvent('buttonEvent', click)\n    .map(event => {\n        button: 'myButton',\n        Wert: 1,\n        eventDaten: event.data\n    })\n    .fold([], (acc, cur)=> acc.push(cur));\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Hier wird dem "),t("code",[e._v("fold()")]),e._v(" Operator als ersten Wert eine leere Liste übergeben. Diese dient als Seed für den State innerhalb des Operators.\nNachdem das erste Event den "),t("code",[e._v("fold()")]),e._v(" Operator erreicht, wird das Event-JSON zu der Liste hinzugefügt. Würde man nun den clickStream\nabonieren, so würde man bei jedem Klickevent eine Liste mit JSON Obejekten erhalten, deren länge davon anhängt, wie oft der Knopf\ngedrückt worden ist.\nDieses Beispiel zeigt zusätzlich das für jeden Operator nicht jedesmal ein neuer Stream erstellt werden muss. Operatoren können\nbeliebig lang auf einem Observable verkettet werden. Im oberen Fall wird das Oberservable mit dem "),t("code",[e._v("map()")]),e._v(" Operator und dem "),t("code",[e._v("fold()")]),e._v("\nOperator verknüpft.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"gebrauchliche-operatoren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gebrauchliche-operatoren","aria-hidden":"true"}},[this._v("#")]),this._v(" Gebräuchliche Operatoren")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"hot-und-cold-observables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hot-und-cold-observables","aria-hidden":"true"}},[this._v("#")]),this._v(" Hot und Cold Observables")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("In RxJS gibt es bei Observables zusätzlich eine Unterscheidung zwischen Hot und Cold Observables. Als Beispiel für ein Hot\nObservable kann ein Stream genommen werden, welcher von dem "),n("code",[this._v("interval()")]),this._v(" Operator erzeugt wurde:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("let liveStream = Rx.Observableinterval(1000);\n\n\nsetTimeout(() => {\n   liveStream.subscribe( \n        data => console.log('Stream: ' + data);\n    )\n},3000)\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("Stream: 4\nStream: 5\nStream: 6\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('var numbers = [1,2,3];\nvar arrayStream. = Rx.Observable.form(numbers);\n\nsetTimeout(() => {\n   arrayStream.subscribe(number =>{\n    console.log("First Sub " + number); \n});\n},1000)\n\nsetTimeout(() => {\n   arrayStream.subscribe(number =>{\n    console.log("Second Sub " + number); \n});\n},3000)\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("First Sub: 1\nFirst Sub: 2\nFirst Sub: 3\n\nSecond Sub: 1\nSecond Sub: 2\nSecond Sub: 3\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"cyclejs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cyclejs","aria-hidden":"true"}},[this._v("#")]),this._v(" CycleJS")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"konzept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#konzept","aria-hidden":"true"}},[this._v("#")]),this._v(" Konzept")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[n("img",{attrs:{src:t(68),alt:"Cycle Konzept",title:"Konzept von CycleJS"}})])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var UserOutput = UserFunction(DisplayInput);\nvar DisplayInput = DisplayFunction(UserOutput);\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var UserOutPut = UserFunction(DisplayFunction(UserOutput));\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Zu beginn des Programmes ist der "),t("code",[e._v("UserOutPut")]),e._v(" nicht definiert, weshalb er nicht genutzt werden kann um einen neuen Wert für die Display\nFunktion zu generieren, was wiederum dazu führt das kein neuer "),t("code",[e._v("UserOutPut")]),e._v(" generiert werden kann."),t("br"),e._v("\nCycleJS löst dieses Problem, indem\nes, anstatt beide Funktionen direkt miteinander zu verknüpfen, eine eigene "),t("code",[e._v("run()")]),e._v(" Methode bereitstellt, welche als Argumente die\n"),t("code",[e._v("UserFunction()")]),e._v(" und die "),t("code",[e._v("DisplayFunction()")]),e._v(" erhält und so als Bindeglied zwischen den beiden Funktion dient."),t("br"),e._v("\nIn CycleJS wird die "),t("code",[e._v("UserFunction()")]),e._v(" mit "),t("code",[e._v("main()")]),e._v(" bezeichnet. Sie enthält die Logik, die es dem Nutzer ermöglicht Eingaben zu machen und\ntransformiert diese Eingaben dahingehend, dass sie von der "),t("code",[e._v("DisplayFunction()")]),e._v(" genutzt werden kann."),t("br"),e._v("\nEine Oberfläche auf dem Display auszugeben\nist natürlich nur eine Weise, wie ein Computer mit der externen Welt interagieren kann. Ein Computer könnte auch Sound über die Boxen ausgeben,\neinen HTTP-Request zu einem Server schicken oder über einen WebSocket mit einer anderen Anwendung kommunizieren. All diese Anwendungsfällen\nwerden bei CycleJS unter dem Oberbegriff "),t("code",[e._v("Driver")]),e._v(" zusammengefasst. Ein "),t("code",[e._v("Driver")]),e._v(" ist also eine Funktion, welche wie die "),t("code",[e._v("DisplayFunktion()")]),e._v(", mit\ndem Nutzer, beziehungsweise der externen Welt, agiert.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"sources-and-sinks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sources-and-sinks","aria-hidden":"true"}},[this._v("#")]),this._v(" Sources and Sinks")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{attrs:{class:"token number"}},[e._v("01")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("import")]),e._v(" xs "),t("span",{attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'xstream'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("02")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("run"),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'@cycle/run'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("03")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("div"),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" input"),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" p"),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" makeDOMDriver"),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'@cycle/dom'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("04")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("05")]),e._v(" "),t("span",{attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{attrs:{class:"token function"}},[e._v("main")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sources"),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("06")]),e._v("   "),t("span",{attrs:{class:"token keyword"}},[e._v("const")]),e._v(" sinks$ "),t("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("07")]),e._v("    "),t("span",{attrs:{class:"token constant"}},[e._v("DOM")]),t("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" sources"),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token constant"}},[e._v("DOM")]),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token function"}},[e._v("select")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token string"}},[e._v("'input'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token function"}},[e._v("events")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token string"}},[e._v("'change'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("08")]),e._v("       "),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token function"}},[e._v("map")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ev "),t("span",{attrs:{class:"token operator"}},[e._v("=>")]),e._v(" ev"),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("target"),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("checked"),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("09")]),e._v("       "),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token function"}},[e._v("startWith")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token boolean"}},[e._v("false")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("10")]),e._v("       "),t("span",{attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{attrs:{class:"token function"}},[e._v("map")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("toggled "),t("span",{attrs:{class:"token operator"}},[e._v("=>")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("11")]),e._v("         "),t("span",{attrs:{class:"token function"}},[e._v("div")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("12")]),e._v("           "),t("span",{attrs:{class:"token function"}},[e._v("input")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("attrs"),t("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("type"),t("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'checkbox'")]),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'Toggle me'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("13")]),e._v("           "),t("span",{attrs:{class:"token function"}},[e._v("p")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("toggled "),t("span",{attrs:{class:"token operator"}},[e._v("?")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'ON'")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{attrs:{class:"token string"}},[e._v("'off'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("14")]),e._v("         "),t("span",{attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("15")]),e._v("       "),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("16")]),e._v("   "),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("17")]),e._v("   "),t("span",{attrs:{class:"token keyword"}},[e._v("return")]),e._v(" sinks$"),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("18")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("19")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("20")]),e._v(" "),t("span",{attrs:{class:"token function"}},[e._v("run")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("main"),t("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("21")]),e._v("   "),t("span",{attrs:{class:"token constant"}},[e._v("DOM")]),t("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{attrs:{class:"token function"}},[e._v("makeDOMDriver")]),t("span",{attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{attrs:{class:"token string"}},[e._v("'#app'")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{attrs:{class:"token number"}},[e._v("22")]),e._v(" "),t("span",{attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Was zunächst auffällt, ist, dass dieses Beispiel nicht die RxJS Bibliothek zum bereitstellen von Streams importiert. Stattdessen wird\ndie xStream Bibliothek benutzt, welche eigens für die Benutzung von CycleJS entwickelt wurde. Allerdings kann CycleJS ebensogut mit RxJS oder\nMost.js benutzt werden. Dabei unterscheiden sich diese Bibliotheken im Grund nur darin, welche Operatoren zur Verfügung gestellt werden und wie\ndie Operatoren und Funktionen benannt werden. So ist die 'subscribe()` Methode unter RxJS nun die 'addListner()' Methode in xStreams."),n("br"),this._v("\nZudem macht die xStream Bibliothek keine Unterscheidung zwischen Hot and Cold Streams, da jeder mit xStream erzeugte Stream ein Hot Stream ist.")])},function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("p",[r("img",{attrs:{src:t(67),alt:"Ausgabe",title:"Ausgabe"}}),e._v("\nDazu wird im Programm zunächst mit der "),r("code",[e._v("makeDOMDriver()")]),e._v(" ein neuer Driver für den DOM erstellt. Dieser DOM Driver kann in der HTML Datei\nunter dem Tag "),r("code",[e._v("#app")]),e._v(" den DOM manipulieren und bootstraped so das Framework. Die "),r("code",[e._v("run()")]),e._v(" Methode stellt der "),r("code",[e._v("main()")]),e._v(" Methode den instanziierten\nDriver über den Übergabeparameter "),r("code",[e._v("sources")]),e._v(" zur Verfügung. Das "),r("code",[e._v("source")]),e._v(" Objekt enthält alle Driver, welcher in der "),r("code",[e._v("run()")]),e._v(" Methode angelegt\nworden sind."),r("br"),e._v("\nNun kann in der "),r("code",[e._v("main()")]),e._v(" Methode ein neuer Stream erzeugt werden. In diesem Beispiel wird über den DOM Driver ein Stream von einem Event erzeugt,\nwelches einen Wert jedesmal einen Wert emitten soll, fall sich der der Wert des Eingabefeldes ändert. Ein Marble-Diagram für Zeile 07 sieht wie folgt\naus:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Der Nutzer klickt auf die CheckBox, was bei jedem Klick ein "),n("code",[this._v("Change")]),this._v(" Event hervorruft. Der sink$ Stream emittet mit jedem Klick auf die\nCheckbox nun ein komplettes Event. Da für die Anwendung nur der mit dem Event assoziierte Wert von bedeutung ist, muss der Stream mit dem\n"),n("code",[this._v("map()")]),this._v(" Operator manipuliert werden.")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("In der "),t("code",[e._v("map()")]),e._v(" Methode wird das Event auf sein eigentlichen Wert gemapped. Da das Event von einer Checkbox kommt, ist der assoziierte Wert\nabwechselnd "),t("code",[e._v("true")]),e._v(" oder "),t("code",[e._v("false")]),e._v("."),t("br"),e._v("\nNachdem das Event auf den Wert gemapped worden ist, wird der Stream mit dem "),t("code",[e._v("startWith()")]),e._v(" Operator initialisiert.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Da der Stream am Ende auf einen virtuellen DOM gemapped wird, muss er einen initialen Wert haben. Würde kein Wert mit "),n("code",[this._v("startWith()")]),this._v(" gesetzt, so\nwürde der DOM erst mit einer Aktion des Nutzers angezeigt werden, da erst durch eine Aktion ein Wert auf dem Stream emittet wird."),n("br"),this._v("\nDa der Stream\nallerdings von dem DOM Driver genutzt wird um die Oberfläche darzustellen, würde auch hier eine Deadlock entstehen. Der Nutzer hätte keine\nMöglichkeit einen initialen Wert zu emitten weil keine View gerendert wurde und es wird keine View gerendert da kein initialer Wert von dem\nStream emitted wird."),n("br"),this._v("\nDie "),n("code",[this._v("startWith()")]),this._v(" Methode emitted auf dem Stream ein initialen Wert, welche als Startpunkt für die View genutzt werden kann.")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Zuletzt wird der Wert des Streams auf die DOM Elemente gemapped. Zusammengefasst sammelt der "),t("code",[e._v("sink$")]),e._v(" Stream Events von einer Checkbox, wandelt\ndie Events auf dem Stream in "),t("code",[e._v("true")]),e._v(" oder "),t("code",[e._v("false")]),e._v(" um, initialisiert den Stream mit einem "),t("code",[e._v("false")]),e._v(' und mapped diese Werte auf ein div Element, welches\ndie Checkbox besitzt von der die Events stammen und einen Paragraphen, der je nach dem welcher Wert auf dem Stream emitted wird auf "ON" oder "off"\ngeschaltet werden kann.'),t("br"),e._v("\nDieser "),t("code",[e._v("sink$")]),e._v(" Stream wird von der "),t("code",[e._v("main()")]),e._v(" Methode returned und dient als eingabe für den Driver, welcher wiederum das "),t("code",[e._v("source")]),e._v(" Objekt der "),t("code",[e._v("main()")]),e._v("\nMethode bildet.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"side-effects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#side-effects","aria-hidden":"true"}},[this._v("#")]),this._v(" Side effects")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[n("img",{attrs:{src:t(66),alt:"Cycle Konzept",title:"Konzept von CycleJS"}})])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"sample-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-code","aria-hidden":"true"}},[this._v("#")]),this._v(" Sample Code")])}],s=t(0),i=Object(s.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[e._m(0),e._m(1),t("p",[e._v("In den letzten Jahren ist das Thema funktionales Programmieren immer stärker aufgekommen. Die Ziele,\nwelche beim funktionalen Programmieren sind dabei die selben wie sich auch beim objektorientierten Programmieren\nerreicht werden sollen:")]),e._m(2),t("p",[e._v("Auch wenn die Ziel der beiden Ansätze gleich sein, so sind die unterliegenden Paradigmen doch völlig unterschiedliche:\nBeim objektorientieren Ansatz wird versucht, die Daten und die damit verbundenen Verhalten miteinander zu vereinen.\nDie daraus resultierende Vereinigung ist die Grundlage des OOP-Ansatzes: Das Objekt.\nIn einem Objekt werden über Instanzvariablen Daten gehalten, die den Zustand des Objektes beschreiben. Zusätzlich\nenthält das Objekt Verhalten in Form von Methoden, mit deren Hilfe der Zustand des Objektes manipuliert werden kann.")]),t("p",[e._v("Ein einfach Beispiel ist die Klasse Arbeiter:")]),e._m(3),t("p",[e._v("Nun könnten die Instanzen dieses Arbeiterobjektes in einer Liste gehalten werden, um sie so beispielsweise zu verwalten.\nEin Anwendungsfall könnte es des weiteren sein, dass alle Arbeiter in dieser Liste eine Gehaltserhöhung bekommen sollen.\nUm dies in einer objektorientierten Sprache wie in diesem Falle Java zu realisieren, müsste das zu schreibende Programm\nüber die Liste der Arbeiter iterieren und für jeden Arbeiter die Methode zur Gehaltserhöhung aufrufen.")]),e._m(4),t("p",[e._v("Der selbe Sachverhalt kann natürlich auch mit einem funktionalen Ansatz abgebildet werden:")]),e._m(5),t("p",[e._v("Hier wird direkt der erste Unterschied zum objektorientieren Ansatz deutlich: Die Trennung von Daten und Verhalten.\nWo im OOP-Ansatz bei der Erstellung der Daten auch gleichzeitig die Methoden zum manipulieren der Daten mitliefern\nwerden musste, so bleiben im FP-Ansatz die Daten rein. Hier können die Daten durch den Einsatz von einfachen Arrays\nrepräsentiert werden.")]),t("p",[e._v("Zur Veränderung der Daten können nun verschiedene Funktionen geschrieben werden. Dabei sollten allerdings verschiedene\nSchlüsselkonzepte beachtet werden:")]),t("center",[t("b",[e._v("1. Funktionen haben eine einzige Aufgabe")])]),t("p",[e._v("Die geschriebenen Funktionen haben genau eine Aufgabe. Dadurch wird erreicht das verschiedene Funktionen\nmiteinander kombinierbar werden und so ein komplexeres Programm bilden. Zudem erhöht das Beschränken einer\nFunktion auf eine einzige Aufgabe die Testbarkeit des Codes. Für das Arbeiterbeispiel bedeutet dies, dass\nes eine Funktion names gehälter_erhöhen() geben wird, welche nur dafür Zuständig ist über die Arbeiter der\nListe zu iterieren. Diese Funktions erhält zwei Eingabeparameter: Eine Liste mit Arbeiters und der eigentliche\nGehaltserhöhung.\nZusätzlich wird es eine Funktion gehalt_erhöhen() implementiert, welche anschließend nur zur Aufgabe hat, das Gehalt eines einzelnen\nArbeiters zu erhöhen.")]),t("center",[t("b",[e._v("2. Daten sind Immutable")])]),t("p",[e._v('Durch den Funktionsaufruf von gehalt_erhöhen() wird kein Wert des originalen Arrays verändert. Immutable bedeutet,\ndass es keine Funktion geben kann, welche die Daten auf irgendeine weise verändern kann. Im OOP-Ansatz ist es übelich den\nZustand oder "state" eines Objektes beliebig zu verändern. Im FP-Ansatz hingegen werden nur Kopien der veränderten Daten\nerzeugt, mit denen im Verlauf des Programmes weiter gearbeitet wird. Der originale "state" in einem funktionalen Programm\nbleibt somit erhalten.\nDies hat zum Vorteile das einerseits ein Funktionsaufruf auf den selben Daten in jedem Fall den selben Output besitzt,\nzum anderen kann der Zustand so, falls gewünscht, über den gesamten Programmablauf verfolgt werden. Auch dieses\nKonzept trägt zur Lesbarkeit und Wartbarkeit des Codes bei.')]),t("center",[t("b",[e._v("3. Funktionen sind rein (Pure)")])]),t("p",[e._v("Funktionen verhalten sich im funktionalen Ansatz ähnlich wie mathemetische Funktionen. Bei einer mathematischen Funktion\nwird ein oder mehrere Eingabewerte genau einem Ausgabewert zugeordnet. Egal wie oft diese Funktion mit den selben\nEingabewerten berechnet wird, sie führt immer zu dem selben Ergebnis.\nDies trifft auch auf die Funktionen im funktionalen Ansatz zu: Mit den selben Eingabeparametern erhält der Aufrufer\njedesmal den selben Rückgabewert. Dabei geht es vor allem darum, dass Funktionsaufrufe nicht von dem globalen State\nder Applikation abhängen sollen, welcher sich zur Laufzeit ändern kann. Ein Funktionsaufruf muss unabhängig vom State\nzu jeder Zeit vorhersagbar sein.")]),e._m(6),t("center",[t("b",[e._v("4. Funktionen sind erste Klasse (First-Class)")])]),t("p",[e._v("Dieses Konzept wird nicht nur von rein funktionalen Programmiersprachen genutzt (z.b Javascript und PHP), ist allerdings\nunabdingbar für den funktionalen Ansatz. First-Class sind Funktionen, welcher einer Variable im Programm zugeordnet werden\nkönnen. Dadurch können Funktionen wie ein normaler Datentyp behandelt werden und zugleich im Verlauf des Programmes ausgeführt\nwerden.")]),t("p",[e._v("Ebenfalls wird es dadurch möglich eine Funktion einer anderen Funktion als Übergabeparameter zu übergeben. Auch wird es\ndadurch möglich Funktionen als Rückgabewert zu verwenden. So ist es beispielsweise möglich eine Filterfunktion zu erstellen,\nwelche als Parameter eine Funktion übergeben bekommt. Die übergebene Funktion entscheidet dann, ob Werte den Filter passieren\noder aussortiert werden.")]),e._m(7),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),t("p",[e._v("--------------\x3e")]),t("p",[e._v("Auf dieser Zeitleiste könnten Werte als Events dargestellt werden, um zu verdeutlichen das diese Werte\nüber einen bestimmten Zeitraum emitted worden sind. Für das obere Beispiel würde eine Zeitleiste mit Events\nfolgendermaßen aussehen:")]),t("p",[e._v("---1---2---3--\x3e")]),t("p",[e._v("Über einen bestimmten Zeitraum wurden also Events auf einem Stream ausgegeben. Da nach der 3 das Ende des\nArrays erreicht ist, endet (completed) der Stream nach diesem Event. Dies wird durch einen Senkrechten Strich\nin der Zeitleiste dargestellt.")]),t("p",[e._v("---1---2---3--|->")]),e._m(15),e._m(16),t("p",[e._v('Dieses Designpattern wird auch Observerpattern genannt, was sich vermutlich schon alleine vom Namen "Observable" ableiten ließ.\nDie untere Abbildung zeigt wie das Observerpattern in UML-Schreibweise aussieht.')]),e._m(17),e._m(18),t("p",[e._v("Das Observable ist ein Konstrukt mit der Aufgabe, die abonnierten Observer über neu erzeugte Werte zu informieren. Die Werte\nselbst stammen dabei von einem Producer, welcher im inneren des Observables Werte generiert.")]),e._m(19),t("p",[e._v("In diesem Beispiel wird ein Stream von Klicks auf einen Button erstellt. Der Producer des Stream ist in diesem Fall das Klickevent des\nKnopfes. Ein Observable ist also das bindeglied zwischen dem Producer, welcher die eigentlichen Werte emitted und den abonierten Observern,\nwelche die emitteten Werte konsumieren. RxJS biete viele Funktionen an, um aus einer Variablen oder einer Eventsource ein Observable mit dem\ndazu passendem Producer zu erstellen:")]),e._m(20),e._m(21),t("p",[e._v("Die Frage die man sich jetzt stellen kann, ist die, welchen Vorteil die Verwendung von Observables beziehungsweise Streams hat.\nÜber ein Array kann auch mit einer Schleife iteriert werden oder von einer Eventsource muss in der Regel kein Stream erstellt werden\num diesen auszuwerten. Das Ware Potential von RxJS und anderen reaktiven Bibliotheken liegt in der Bereitstellung der Operatoren, welche\nauf den Stream angewendet werden können.")]),e._m(22),e._m(23),t("p",[e._v("Im Diagramm würden die beiden Streams nun so aussehen:")]),e._m(24),e._m(25),e._m(26),e._m(27),t("p",[e._v("Der fold() Operator hält im ersten Parameter der übergeben Funktion (accumulator) den State. In dem zweiten Parameter (current) wird der\nvom Stream emittete Wert entgegen genommen. Anschließend muss in der Funktion lediglich der derzeitige Wert auf den State addiert werden.\nIn diesem Beispiel wurden nur Zahlen addiert, allerdings können auch komplexe Objekte oder sogar Streams selbst emitted werden.\nAnstatt das Event auf eine '1' zu mappen, könnte das Event ebensogut auf ein JSON Objekt gemapped werden:")]),e._m(28),e._m(29),e._m(30),e._m(31),e._m(32),e._m(33),t("p",[e._v("Der liveStream Stream wurde so erzeugt, dass jede Sekunde ein hochzählender Wert emitted wird.")]),t("p",[e._v("liveStream ---1---2---3---4---5---6---\x3e")]),t("p",[e._v("Allerdings gibt es für die ersten 3 Sekunden noch keinen abonnenten, welcher die Werte aus dem Stream entgegen nehmen könnte.\nDer Timeout für den ersten Abonnenten wird erst 3 Sekunden nach Erstellung des Streams getriggert. Folgende Ausgabe wird auf\nder Konsole ausgegeben:")]),e._m(34),t("p",[e._v("Der Stream emittet also schon Werte noch bevor ein Observer ihn abonniert hat. Würde zu einem späteren Zeit ein weiterer Observer\nden Stream abonnieren, würde dieser Observer erst beim nächsten Emit des Streams benachrichtig werden, alle vorhergehenden Werte\ndie vor dem Abonieren des neuen Observers liegen, bekommt der neue Observer nicht mit.")]),t("p",[e._v("Anders verhält es sich mit Cold Observables. Hier wird für jeden Observer ein neuer Stream aufgemacht und nach einem abonieren\ndes Streams bekommt der Observer alle Werte, welche von dem Stream emitted worden sind.")]),t("p",[e._v("Als Beispiel eines Cold Observables kann man die Erzeugung eines Stream aus einem Array von Zahlen nehmen:")]),e._m(35),t("p",[e._v("Ausgabe:")]),e._m(36),t("p",[e._v("In diesem Fall teilen sich die beiden Observer nicht einen Stream, sondern jeder für jeden Observer wird ein gesonderter Stream\nerzeugt. Der Stream emittet keinen Wert solange nicht mindestens ein Observer den Stream abonniert hat. Ob ein Stream Hot oder Cold\nist hängt davon hab mit welchem Konstruktor das Observable erzeugt wurde.")]),e._m(37),t("p",[e._v("CycleJS ist ein funktionale reaktives Javascript Framework, geschrieben von André Staltz.")]),e._m(38),t("p",[e._v('Das Kernkonzept von CycleJS lautet: "Was wäre wenn der Nutzer eine Funktion wäre?". Es ist einfach sich eine moderne graphische\nAnwendung als eine große Funktion vorzustellen: Sie nimmt die Nutzereingaben des Nutzer über Eingabegeräte wie Maus und\nTastatur auf, verarbeitet diese, und gibt anschließend ein Resultat über den Bildschirm aus. Der Nutzer wiederrum nimmt die\nAusgabe der Oberfläche als Eingabe, verarbeitet diese, und gibt die Ausgabe der Nutzerfunktion über seine "Ausgabegeräte" wie\nHände oder auch Sprache an die Oberfläche zurück.')]),e._m(39),t("p",[e._v("Das obere Bild veranschaulicht dieses Konzept und zeigt gleichzeitig, woher CycleJS seinen Namen hat: Die Eingaben und Ausgaben\nbilden einen Kreis, wo die Ausgaben der einen Funktion die Eingaben der anderen Funktion ist. Funktional sieht das Konzept\nfolgendermaßen aus:")]),e._m(40),t("p",[e._v("Hier erkennt man auch direkt, welche Lösung das CycleJS Framework bereitstellen muss. Es gibt eine zirkuläre Abhängigkeit zwischen\nder Benutzerfunktion und der Oberflächenfunktion. Um diese Abhängigkeit deutlicher zu machen kann die Eingabe einer Funktion mit\nder produzierenden Funktion subsituiert werden:")]),e._m(41),e._m(42),e._m(43),t("p",[e._v("Eine Beispielapplikation in CycleJS kann folgendermaßen aussehen:")]),e._m(44),e._m(45),t("p",[e._v("Das der Beispielcode soll folgende Ausgabe produzieren:")]),e._m(46),t("p",[e._v("Nutzer:  ---Click------Click----Click------Click----\x3e")]),t("p",[e._v("sink$:   -----x----------x--------x----------x------\x3e")]),e._m(47),t("p",[e._v("sink: -----x--------x-------x------x---------x----\x3e    \n         map()  \nsink:----true----false-----true---false-----true--\x3e")]),e._m(48),t("p",[e._v("sink:---------true----false-----true---false-----true--\x3e  \n         startWith(false)    \nsink:false----true----false-----true---false-----true--\x3e")]),e._m(49),e._m(50),e._m(51),t("p",[e._v("Aufgrund der Trennung von Nebeneffekten wie Lesen einer Datei, Manipulieren des DOMs oder Abschicken eines HTTP-Requests von der reinen Logik des\nProgrammes, stellt CycleJS funktionales Framework dar. Die folgende Abbildung verdeutlicht den vorherigen Abschnitt und zeigt gut die Trennung von\nLogik zu Nebeneffekten:")]),e._m(52),e._m(53)],1)},r,!1,null,null,null);n.default=i.exports},66:function(e,n,t){e.exports=t.p+"assets/img/cycleSideEffects.166af670.svg"},67:function(e,n,t){e.exports=t.p+"assets/img/exampleOutput.09be7f1d.png"},68:function(e,n,t){e.exports=t.p+"assets/img/UserAsFunction.c0f4ed5d.png"},69:function(e,n,t){e.exports=t.p+"assets/img/Observer_w_update.47f07abf.svg"}}]);